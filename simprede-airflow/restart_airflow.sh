#!/bin/bash

# SIMPREDE Airflow Restart Script
# This script quickly restarts Airflow containers without rebuilding

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

print_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

# Change to script directory
cd "$(dirname "$0")"

# Check for docker-compose command
if command -v docker-compose > /dev/null 2>&1; then
    DOCKER_COMPOSE_CMD="docker-compose"
elif docker compose version > /dev/null 2>&1; then
    DOCKER_COMPOSE_CMD="docker compose"
else
    echo -e "${RED}[ERROR]${NC} Neither 'docker-compose' nor 'docker compose' is available."
    exit 1
fi

echo -e "${BLUE}================================================${NC}"
print_info "REINÍCIO DOS CONTENTORES AIRFLOW"
echo -e "${BLUE}================================================${NC}"

# Verify .env file before restarting
print_info "Verificação do ficheiro .env antes do reinício..."
if [ -f ".env" ]; then
    if grep -q "^DB_HOST=" .env && grep -q "^DB_USER=" .env && grep -q "^DB_PASSWORD=" .env; then
        print_success "Credenciais da base de dados encontradas no .env"
    else
        print_warning "AVISO: Credenciais da base de dados podem estar em falta no .env"
        print_info "Conteúdo atual do .env (sem passwords):"
        grep -v "PASSWORD" .env | while read line; do
            if [ ! -z "$line" ] && [[ ! "$line" =~ ^#.* ]]; then
                echo "  $line"
            fi
        done
    fi
else
    print_warning "AVISO: Ficheiro .env não encontrado"
fi

print_info "Paragem dos contentores..."
$DOCKER_COMPOSE_CMD down

print_info "Arranque dos contentores..."
$DOCKER_COMPOSE_CMD up -d

print_info "Aguardando que os serviços fiquem prontos..."
sleep 10

print_success "Airflow reiniciado com sucesso!"
echo -e "${GREEN}Interface Web:${NC} http://localhost:8080"

# Display GCS status
echo ""
echo -e "${BLUE}================================================${NC}"
print_info "GOOGLE CLOUD STORAGE STATUS"
echo -e "${BLUE}================================================${NC}"

if [ -f "./config/gcs-credentials.json" ]; then
    echo -e "${GREEN}✅ Credenciais GCS:${NC} Configuradas"
    
    # Extract project info if possible
    if command -v python3 > /dev/null 2>&1; then
        PROJECT_ID=$(python3 -c "import json; data=json.load(open('./config/gcs-credentials.json')); print(data.get('project_id', 'N/A'))" 2>/dev/null || echo "N/A")
        if [ "$PROJECT_ID" != "N/A" ]; then
            echo -e "${GREEN}   Project ID:${NC} $PROJECT_ID"
        fi
    fi
    
    # Get GCS settings from .env
    if [ -f ".env" ]; then
        BUCKET_NAME=$(grep "^GCS_BUCKET_NAME=" .env | cut -d'=' -f2 2>/dev/null || echo "simprede-data-pipeline")
        echo -e "${GREEN}   Bucket:${NC} $BUCKET_NAME"
        echo -e "${GREEN}   Export GCS:${NC} ATIVO"
    fi
else
    echo -e "${YELLOW}⚠️ Credenciais GCS:${NC} Não configuradas"
    echo -e "${YELLOW}   Export GCS:${NC} INATIVO (credenciais necessárias)"
    echo ""
    print_info "Para ativar o GCS:"
    print_info "1. Adicione suas credenciais: ./config/gcs-credentials.json"
    print_info "2. Reinicie: ./restart_airflow.sh"
fi

# Extract the actual admin password
print_info "Extracting admin credentials..."

# Check for docker-compose command
if command -v docker-compose > /dev/null 2>&1; then
    DOCKER_COMPOSE_CMD="docker-compose"
elif docker compose version > /dev/null 2>&1; then
    DOCKER_COMPOSE_CMD="docker compose"
fi

ADMIN_USERNAME="admin"

# Extract password from logs
ADMIN_PASSWORD=$($DOCKER_COMPOSE_CMD logs airflow-standalone | grep -i "Password for user 'admin'" | tail -1 | sed -n "s/.*Password for user 'admin': \([^ ]*\).*/\1/p")

# If not found in logs, try the generated file
if [ -z "$ADMIN_PASSWORD" ]; then
    ADMIN_PASSWORD=$($DOCKER_COMPOSE_CMD exec -T airflow-standalone cat /opt/airflow/simple_auth_manager_passwords.json.generated 2>/dev/null | grep -o '"admin": "[^"]*"' | cut -d'"' -f4 || echo "")
fi

if [ -z "$ADMIN_PASSWORD" ]; then
    echo -e "${YELLOW}Password:${NC} <check logs with: docker compose logs airflow-standalone | grep password>"
else
    echo -e "${GREEN}Username:${NC} $ADMIN_USERNAME"
    echo -e "${GREEN}Password:${NC} $ADMIN_PASSWORD"
fi

echo ""
print_info "✓ Password is auto-generated by Airflow Simple Auth Manager"

echo ""
print_info "Container status:"
$DOCKER_COMPOSE_CMD ps
