import pickle
import os
from pathlib import Path
import numpy as np
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.dummy import DummyClassifier

def create_simple_models():
    """Create simple placeholder ML models for testing"""
    
    # Create models directory
    script_dir = os.path.dirname(os.path.abspath(__file__))
    models_dir = Path(script_dir) / "models"
    models_dir.mkdir(exist_ok=True)
    
    print(f"Creating models in: {models_dir}")
    
    # Create a simple TF-IDF vectorizer with Portuguese disaster-related sample texts
    sample_texts = [
        "inc√™ndio florestal mata duas pessoas evacuadas feridos",
        "temporal causa inunda√ß√µes desalojados vitimas",
        "vento forte derruba √°rvores casas destru√≠das",
        "chuva intensa evacua popula√ß√£o desaparecidos mortos",
        "desastre natural feridos bombeiros socorro",
        "seca prolongada agricultura preju√≠zos",
        "granizo destr√≥i culturas agr√≠colas",
        "nev√£o bloqueia estradas isolados",
        "ciclone aproxima costa evacua√ß√£o",
        "terramotos tremores popula√ß√£o assustada",
        "not√≠cia desporto futebol jogo resultado",
        "pol√≠tica economia governo ministro decis√£o",
        "cultura arte exposi√ß√£o museu evento",
        "tecnologia internet aplica√ß√£o novo sistema",
        "sa√∫de m√©dico hospital tratamento"
    ]
    
    # Create and fit vectorizer with Portuguese text
    vectorizer = TfidfVectorizer(
        max_features=1000, 
        stop_words=None,
        ngram_range=(1, 2),  # Include bigrams for better context
        min_df=1,  # Include all terms for small dataset
        max_df=0.95  # Exclude very common terms
    )
    
    # FIT the vectorizer - this is crucial!
    vectorizer.fit(sample_texts)
    
    # Save vectorizer
    vectorizer_path = models_dir / "tfidf_vectorizer.pkl"
    with open(vectorizer_path, 'wb') as f:
        pickle.dump(vectorizer, f)
    print(f"‚úÖ Created TF-IDF vectorizer: {vectorizer_path}")
    
    # Create a simple dummy classifier
    # Transform the sample texts to get feature vectors
    X_sample = vectorizer.transform(sample_texts)
    
    # Labels: 1 = disaster related, 0 = not disaster related
    y_sample = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0]
    
    # Use strategy="stratified" to maintain class distribution
    classifier = DummyClassifier(strategy="stratified", random_state=42)
    classifier.fit(X_sample, y_sample)
    
    # Save classifier
    model_path = models_dir / "modelo_classificacao.pkl"
    with open(model_path, 'wb') as f:
        pickle.dump(classifier, f)
    print(f"‚úÖ Created classification model: {model_path}")
    
    # Test the models to ensure they work
    print("\nüß™ Testing the created models...")
    
    # Test vectorizer
    test_text = ["inc√™ndio mata pessoas", "jogo de futebol"]
    test_vectors = vectorizer.transform(test_text)
    print(f"‚úÖ Vectorizer test: {test_vectors.shape}")
    
    # Test classifier
    predictions = classifier.predict(test_vectors)
    probabilities = classifier.predict_proba(test_vectors)
    print(f"‚úÖ Classifier test - Predictions: {predictions}")
    print(f"‚úÖ Classifier test - Probabilities shape: {probabilities.shape}")
    
    print("‚úÖ Simple ML models created and tested successfully!")
    return True

if __name__ == "__main__":
    create_simple_models()