import pickle
import os
from pathlib import Path
import numpy as np
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.multiclass import OneVsRestClassifier

def create_hydromorphological_models():
    """Create ML models specifically for hydromorphological event classification"""
    
    # Create models directory
    script_dir = os.path.dirname(os.path.abspath(__file__))
    models_dir = Path(script_dir) / "models"
    models_dir.mkdir(exist_ok=True)
    
    print(f"Creating hydromorphological event models in: {models_dir}")
    
    # Comprehensive hydromorphological event samples in Portuguese
    hydro_samples = {
        "inundacao_fluvial": [
            "rio transborda inunda casas evacua√ß√£o urgente",
            "cheia do tejo deixa desalojados centro cidade",
            "ribeira sai do leito alaga campos agricultores",
            "curso de √°gua galga margens corta estradas",
            "rio mondego provoca inunda√ß√µes coimbra evacuados",
            "cheia s√∫bita arasta carros mata pessoas",
            "caudal excepcional ribeiro inunda vale",
            "rio douro atinge cota alerta popula√ß√£o retirada"
        ],
        "inundacao_pluvial": [
            "chuva torrencial alaga ruas centro cidade",
            "aguaceiro intenso provoca inunda√ß√µes urbanas",
            "precipita√ß√£o extrema satura sistema drenagem",
            "chuva forte causa alagamentos caves garagens",
            "temporal pluvioso inunda t√∫neis metro cortado",
            "precipita√ß√£o abundante provoca cheias urbanas",
            "chuva persistente alaga esta√ß√µes metro",
            "aguaceiro causa transtornos tr√¢nsito lisboa"
        ],
        "inundacao_costeira": [
            "mar√© viva inunda marginal cascais",
            "ressaca do mar invade casas primeira linha",
            "ondula√ß√£o forte galgou pared√£o maritimo",
            "tsunami provocou evacua√ß√£o zona costeira",
            "maremoto causa ondas gigantes destroi cais",
            "tempestade mar√≠tima inunda baixa pombalina",
            "agita√ß√£o mar√≠tima forte galga molhes",
            "mar invade estradas costeiras fecha acesso"
        ],
        "deslizamento": [
            "deslizamento terras mata fam√≠lia casa soterrada",
            "derrocada encosta corta estrada nacional",
            "escorregamento vertente destr√≥i habita√ß√µes",
            "movimento massa rochosa provoca v√≠timas",
            "deslize terras provocado chuvas intensas",
            "desprendimento rochas fecha t√∫nel feridos",
            "solo inst√°vel provoca derrocada mortal",
            "encosta desliza sobre aldeia evacua√ß√£o total"
        ],
        "erosao": [
            "eros√£o costeira destr√≥i casas beira mar",
            "galgamento ondas erode fal√©sia habita√ß√µes",
            "mar avan√ßa terra dentro come praia",
            "eros√£o fluvial provoca derrocada ponte",
            "margem rio cede casa cai √°gua",
            "fen√≥menos erosivos amea√ßam povoa√ß√£o costeira",
            "recuo costa amea√ßa infraestruturas balneares",
            "processo erosivo acelera destrui√ß√£o marginal"
        ],
        "subsidencia": [
            "subsid√™ncia terreno engole casa fam√≠lia",
            "abatimento solo provoca colapso edif√≠cio",
            "cavidade subterr√¢nea cede estrada afunda",
            "terreno cede s√∫bita abertura cratera",
            "solo abate casa desaba interior terra",
            "fen√≥meno subsid√™ncia afeta zona urbana",
            "abatimento s√∫bito terreno isola casas",
            "cavidade natural provoca afundamento via"
        ]
    }
    
    # Non-hydromorphological events for contrast
    non_hydro_samples = [
        "inc√™ndio florestal combatido bombeiros meios a√©reos",
        "vento forte derruba √°rvores corta electricidade",
        "granizo destr√≥i culturas vinhas olivais",
        "seca prolongada afeta agricultura reservat√≥rios",
        "neve abundante bloqueia estradas montanha",
        "tempestade seca raios provocam inc√™ndios",
        "not√≠cia desporto futebol jogo resultado vit√≥ria",
        "pol√≠tica economia governo ministro decis√£o",
        "cultura arte exposi√ß√£o museu evento festival",
        "tecnologia internet aplica√ß√£o novo sistema",
        "sa√∫de m√©dico hospital tratamento paciente",
        "educa√ß√£o escola universidade estudantes",
        "turismo f√©rias viagem destino praia hotel",
        "m√∫sica festival concerto artista espet√°culo"
    ]
    
    # Prepare training data
    texts = []
    labels = []
    
    # Add hydromorphological samples
    for event_type, samples in hydro_samples.items():
        texts.extend(samples)
        labels.extend([event_type] * len(samples))
    
    # Add non-hydromorphological samples
    texts.extend(non_hydro_samples)
    labels.extend(['non_hydro'] * len(non_hydro_samples))
    
    print(f"Training data: {len(texts)} samples")
    print(f"Hydromorphological classes: {list(hydro_samples.keys())}")
    print(f"Class distribution:")
    for label in set(labels):
        count = labels.count(label)
        print(f"  {label}: {count} samples")
    
    # Create enhanced vectorizer for hydromorphological terms
    vectorizer = TfidfVectorizer(
        max_features=2000,
        stop_words=None,
        ngram_range=(1, 3),  # Include trigrams for better context
        min_df=1,
        max_df=0.95,
        analyzer='word',
        lowercase=True,
        # Custom token pattern to capture water-related terms
        token_pattern=r'\b[a-z√°√†√¢√£√©√™√≠√≥√¥√µ√∫√ß√±]+\b'
    )
    
    X = vectorizer.fit_transform(texts)
    print(f"Feature matrix shape: {X.shape}")
    
    # Create sophisticated classifier for hydromorphological events
    classifier = LogisticRegression(
        random_state=42,
        max_iter=2000,
        multi_class='ovr',
        class_weight='balanced',  # Handle any class imbalance
        solver='liblinear'  # Good for small datasets
    )
    classifier.fit(X, labels)
    
    # Save vectorizer
    vectorizer_path = models_dir / "tfidf_vectorizer.pkl"
    with open(vectorizer_path, 'wb') as f:
        pickle.dump(vectorizer, f)
    print(f"‚úÖ Created hydromorphological TF-IDF vectorizer: {vectorizer_path}")
    
    # Save classifier
    model_path = models_dir / "modelo_classificacao.pkl"
    with open(model_path, 'wb') as f:
        pickle.dump(classifier, f)
    print(f"‚úÖ Created hydromorphological classification model: {model_path}")
    
    # Test the models with hydromorphological examples
    print("\nüß™ Testing hydromorphological event classification...")
    
    test_texts = [
        "rio sai do leito inunda vila evacua√ß√£o",
        "chuva intensa causa alagamentos centro cidade",
        "mar galga pared√£o inunda estrada marginal",
        "deslizamento terras mata pessoas casa soterrada",
        "eros√£o costeira destr√≥i casas beira mar",
        "terreno abate casa desaba cratera",
        "inc√™ndio florestal bombeiros combatem chamas",
        "jogo de futebol benfica porto resultado"
    ]
    
    test_vectors = vectorizer.transform(test_texts)
    predictions = classifier.predict(test_vectors)
    probabilities = classifier.predict_proba(test_vectors)
    
    print(f"‚úÖ Test predictions shape: {predictions.shape}")
    print(f"‚úÖ Test probabilities shape: {probabilities.shape}")
    
    # Show detailed predictions for hydromorphological events
    class_names = classifier.classes_
    print(f"\nDetailed test results:")
    for i, (text, pred) in enumerate(zip(test_texts, predictions)):
        # Get confidence for predicted class
        pred_idx = list(class_names).index(pred)
        confidence = probabilities[i][pred_idx]
        print(f"  '{text[:50]}...'")
        print(f"    -> {pred} (confidence: {confidence:.3f})")
        
        # Show top 3 predictions if it's a hydromorphological event
        if pred != 'non_hydro':
            top_3_idx = np.argsort(probabilities[i])[-3:][::-1]
            print(f"    Top 3: {[(class_names[idx], probabilities[i][idx]) for idx in top_3_idx]}")
        print()
    
    print("‚úÖ Hydromorphological event classification models created successfully!")
    return True

# Also create a simplified rule-based detector for hydromorphological events
def create_hydro_rule_patterns():
    """Create rule-based patterns specifically for hydromorphological events"""
    
    patterns = {
        "inundacao_fluvial": {
            "primary_keywords": ["rio", "ribeira", "ribeiro", "cheia", "transborda", "galga"],
            "secondary_keywords": ["curso √°gua", "leito", "margens", "caudal", "afluente"],
            "impact_keywords": ["inunda", "alaga", "evacua√ß√£o", "desalojados", "isolados"]
        },
        "inundacao_pluvial": {
            "primary_keywords": ["chuva", "precipita√ß√£o", "aguaceiro", "temporal"],
            "secondary_keywords": ["torrencial", "intensa", "abundante", "drenagem"],
            "impact_keywords": ["alaga", "inunda", "caves", "t√∫neis", "sistema drenagem"]
        },
        "inundacao_costeira": {
            "primary_keywords": ["mar", "mar√©", "ondas", "ressaca", "tsunami"],
            "secondary_keywords": ["costeira", "marginal", "pared√£o", "molhe", "agita√ß√£o mar√≠tima"],
            "impact_keywords": ["galga", "invade", "inunda", "galgamento", "evacua√ß√£o"]
        },
        "deslizamento": {
            "primary_keywords": ["deslizamento", "derrocada", "escorregamento", "deslize"],
            "secondary_keywords": ["encosta", "vertente", "talude", "massa rochosa", "terrenos"],
            "impact_keywords": ["mata", "soterra", "corta estrada", "destr√≥i", "v√≠timas"]
        },
        "erosao": {
            "primary_keywords": ["eros√£o", "galgamento", "recuo", "desgaste"],
            "secondary_keywords": ["costeira", "fal√©sia", "margem", "praia", "costa"],
            "impact_keywords": ["destr√≥i", "amea√ßa", "avan√ßa", "come", "recua"]
        },
        "subsidencia": {
            "primary_keywords": ["subsid√™ncia", "abatimento", "afundamento", "colapso"],
            "secondary_keywords": ["terreno", "solo", "cavidade", "cratera"],
            "impact_keywords": ["engole", "cede", "afunda", "desaba", "provoca"]
        }
    }
    
    # Save patterns for use in processing
    script_dir = os.path.dirname(os.path.abspath(__file__))
    patterns_path = Path(script_dir) / "hydro_patterns.pkl"
    
    with open(patterns_path, 'wb') as f:
        pickle.dump(patterns, f)
    
    print(f"‚úÖ Created hydromorphological rule patterns: {patterns_path}")
    return patterns

if __name__ == "__main__":
    # Create both ML models and rule patterns
    create_hydromorphological_models()
    create_hydro_rule_patterns()
    
    print("\nüéØ Hydromorphological event classification system created!")
    print("üìä Event types covered:")
    print("  - inundacao_fluvial (river flooding)")
    print("  - inundacao_pluvial (pluvial flooding)")  
    print("  - inundacao_costeira (coastal flooding)")
    print("  - deslizamento (landslides)")
    print("  - erosao (erosion)")
    print("  - subsidencia (subsidence)")