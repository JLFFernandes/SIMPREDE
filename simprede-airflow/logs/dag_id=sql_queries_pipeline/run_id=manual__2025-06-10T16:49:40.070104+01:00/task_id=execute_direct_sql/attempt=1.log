{"timestamp":"2025-06-10T15:49:42.213324","level":"info","event":"DAG bundles loaded: dags-folder","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-06-10T15:49:42.213842","level":"info","event":"Filling up the DagBag from /opt/airflow/dags/sql_queries_dag.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-06-10T15:49:43.953207Z","level":"info","event":"✅ PostgresHook imported successfully","chan":"stdout","logger":"task"}
{"timestamp":"2025-06-10T15:49:43.953507Z","level":"info","event":"✅ PostgresOperator imported successfully","chan":"stdout","logger":"task"}
{"timestamp":"2025-06-10T15:49:43.953756Z","level":"info","event":"✅ PostgreSQL provider fully available","chan":"stdout","logger":"task"}
{"timestamp":"2025-06-10T15:49:43.971532Z","level":"info","event":"✅ Recreated environment variable: AIRFLOW_CONN_SUPABASE_POSTGRES","chan":"stdout","logger":"task"}
{"timestamp":"2025-06-10T15:49:43.974343","level":"info","event":"Secrets backends loaded for worker","count":1,"backend_classes":["EnvironmentVariablesBackend"],"logger":"supervisor"}
{"timestamp":"2025-06-10T15:49:43.975774","level":"warning","event":"empty cryptography key - values will not be stored encrypted.","logger":"airflow.models.crypto"}
{"timestamp":"2025-06-10T15:49:43.976405","level":"info","event":"Connection Retrieved 'supabase_postgres'","logger":"airflow.hooks.base"}
{"timestamp":"2025-06-10T15:49:43.976521","level":"warning","event":"This setter is for backward compatibility and should not be used.\nSince the introduction of connection property, the providers listed below breaks due to assigning value to self.connection in their __init__ method.\n* apache-airflow-providers-mysql<5.7.1\n* apache-airflow-providers-elasticsearch<5.5.1\n* apache-airflow-providers-postgres<5.13.0","logger":"airflow.task.hooks.airflow.providers.postgres.hooks.postgres.PostgresHook"}
{"timestamp":"2025-06-10T15:49:43.976786Z","level":"info","event":"✅ count_all_staging_tables: query prepared","chan":"stdout","logger":"task"}
{"timestamp":"2025-06-10T15:49:43.976893Z","level":"info","event":"✅ recent_data_summary: query prepared","chan":"stdout","logger":"task"}
{"timestamp":"2025-06-10T15:49:43.976813","level":"info","event":"Done. Returned value was: {'count_all_staging_tables': 'query_prepared', 'recent_data_summary': 'query_prepared'}","logger":"airflow.task.operators.airflow.providers.standard.operators.python.PythonOperator"}
{"timestamp":"2025-06-10T15:49:43.977073","level":"info","event":"Pushing xcom","ti":"RuntimeTaskInstance(id=UUID('01975a88-6e93-7707-b878-83ecd6d41c3e'), task_id='execute_direct_sql', dag_id='sql_queries_pipeline', run_id='manual__2025-06-10T16:49:40.070104+01:00', try_number=1, map_index=-1, hostname='aa05a188031b', context_carrier=None, task=<Task(PythonOperator): execute_direct_sql>, bundle_instance=LocalDagBundle(name=dags-folder), max_tries=1, start_date=datetime.datetime(2025, 6, 10, 15, 49, 42, 29891, tzinfo=TzInfo(UTC)), end_date=None, state=<TaskInstanceState.RUNNING: 'running'>, is_mapped=False, rendered_map_index=None)","logger":"task"}
