{"timestamp":"2025-06-10T10:35:31.908226","level":"info","event":"DAG bundles loaded: dags-folder","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-06-10T10:35:31.908502","level":"info","event":"Filling up the DagBag from /opt/airflow/dags/sql_queries_dag.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-06-10T10:35:31.925174Z","level":"info","event":"✅ PostgresHook imported successfully","chan":"stdout","logger":"task"}
{"timestamp":"2025-06-10T10:35:31.929313Z","level":"info","event":"✅ PostgresOperator imported successfully","chan":"stdout","logger":"task"}
{"timestamp":"2025-06-10T10:35:31.929397Z","level":"info","event":"✅ PostgreSQL provider fully available","chan":"stdout","logger":"task"}
{"timestamp":"2025-06-10T10:35:31.946011Z","level":"info","event":"✅ Recreated environment variable: AIRFLOW_CONN_SUPABASE_POSTGRES","chan":"stdout","logger":"task"}
{"timestamp":"2025-06-10T10:35:31.947083","level":"info","event":"Secrets backends loaded for worker","count":1,"backend_classes":["EnvironmentVariablesBackend"],"logger":"supervisor"}
{"timestamp":"2025-06-10T10:35:31.947496","level":"warning","event":"empty cryptography key - values will not be stored encrypted.","logger":"airflow.models.crypto"}
{"timestamp":"2025-06-10T10:35:31.947721","level":"info","event":"Connection Retrieved 'supabase_postgres'","logger":"airflow.hooks.base"}
{"timestamp":"2025-06-10T10:35:31.947765","level":"warning","event":"This setter is for backward compatibility and should not be used.\nSince the introduction of connection property, the providers listed below breaks due to assigning value to self.connection in their __init__ method.\n* apache-airflow-providers-mysql<5.7.1\n* apache-airflow-providers-elasticsearch<5.5.1\n* apache-airflow-providers-postgres<5.13.0","logger":"airflow.task.hooks.airflow.providers.postgres.hooks.postgres.PostgresHook"}
{"timestamp":"2025-06-10T10:35:31.947930Z","level":"info","event":"🔍 Executing 1 SQL queries...","chan":"stdout","logger":"task"}
{"timestamp":"2025-06-10T10:35:31.948007Z","level":"info","event":"📋 Executing query: basic_connection_test","chan":"stdout","logger":"task"}
{"timestamp":"2025-06-10T10:35:31.948084Z","level":"info","event":"✅ Query 'basic_connection_test' prepared for execution","chan":"stdout","logger":"task"}
{"timestamp":"2025-06-10T10:35:31.948157Z","level":"info","event":"✅ SQL query execution completed. Results stored in XCom.","chan":"stdout","logger":"task"}
{"timestamp":"2025-06-10T10:35:31.947873","level":"info","event":"Done. Returned value was: {'basic_connection_test': 'query_prepared'}","logger":"airflow.task.operators.airflow.providers.standard.operators.python.PythonOperator"}
{"timestamp":"2025-06-10T10:35:31.947946","level":"info","event":"Pushing xcom","ti":"RuntimeTaskInstance(id=UUID('01975968-c6c8-7366-83f6-11bca465c74a'), task_id='execute_sql_queries', dag_id='sql_queries_pipeline', run_id='manual__2025-06-10T11:35:28.294713+01:00', try_number=1, map_index=-1, hostname='e583b5406efa', context_carrier=None, task=<Task(PythonOperator): execute_sql_queries>, bundle_instance=LocalDagBundle(name=dags-folder), max_tries=1, start_date=datetime.datetime(2025, 6, 10, 10, 35, 31, 863209, tzinfo=TzInfo(UTC)), end_date=None, state=<TaskInstanceState.RUNNING: 'running'>, is_mapped=False, rendered_map_index=None)","logger":"task"}
