{"timestamp":"2025-06-10T15:15:45.387569","level":"info","event":"DAG bundles loaded: dags-folder","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-06-10T15:15:45.388132","level":"info","event":"Filling up the DagBag from /opt/airflow/dags/sql_queries_dag.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-06-10T15:15:45.434753Z","level":"info","event":"‚úÖ PostgresHook imported successfully","chan":"stdout","logger":"task"}
{"timestamp":"2025-06-10T15:15:45.438259Z","level":"info","event":"‚úÖ PostgresOperator imported successfully","chan":"stdout","logger":"task"}
{"timestamp":"2025-06-10T15:15:45.438478Z","level":"info","event":"‚úÖ PostgreSQL provider fully available","chan":"stdout","logger":"task"}
{"timestamp":"2025-06-10T15:15:45.498472Z","level":"info","event":"üîç Checking available database providers...","chan":"stdout","logger":"task"}
{"timestamp":"2025-06-10T15:15:45.498581Z","level":"info","event":"üìã Provider Status:","chan":"stdout","logger":"task"}
{"timestamp":"2025-06-10T15:15:45.498641Z","level":"info","event":"  - POSTGRES: ‚úÖ Available","chan":"stdout","logger":"task"}
{"timestamp":"2025-06-10T15:15:45.498682Z","level":"info","event":"  - MYSQL: ‚úÖ Available","chan":"stdout","logger":"task"}
{"timestamp":"2025-06-10T15:15:45.454964","level":"info","event":"Done. Returned value was: {'postgres': True, 'mysql': True}","logger":"airflow.task.operators.airflow.providers.standard.operators.python.PythonOperator"}
{"timestamp":"2025-06-10T15:15:45.455105","level":"info","event":"Pushing xcom","ti":"RuntimeTaskInstance(id=UUID('01975a69-5e68-79a7-9af2-6ad0510cffb3'), task_id='check_providers', dag_id='sql_queries_pipeline', run_id='manual__2025-06-10T16:15:44.309272+01:00', try_number=1, map_index=-1, hostname='aa05a188031b', context_carrier=None, task=<Task(PythonOperator): check_providers>, bundle_instance=LocalDagBundle(name=dags-folder), max_tries=1, start_date=datetime.datetime(2025, 6, 10, 15, 15, 45, 275497, tzinfo=TzInfo(UTC)), end_date=None, state=<TaskInstanceState.RUNNING: 'running'>, is_mapped=False, rendered_map_index=None)","logger":"task"}
