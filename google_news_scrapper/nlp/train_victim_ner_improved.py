import spacyfrom spacy.training.example import Exampleimport os# Training data with improved boundaries and more precise annotationsTRAIN_DATA = [    # FATALITIES - improved spans and more variations    ("Duas pessoas morreram na enchente.", {"entities": [(0, 19, "FATALITIES")]}),    ("Três pessoas morreram no acidente.", {"entities": [(0, 19, "FATALITIES")]}),    ("Uma vítima mortal foi registada.", {"entities": [(0, 16, "FATALITIES")]}),    ("Morreram cinco pessoas no local.", {"entities": [(0, 21, "FATALITIES")]}),    ("O desastre causou quatro mortes na cidade.", {"entities": [(19, 32, "FATALITIES")]}),    ("Foram confirmadas dez mortes hoje.", {"entities": [(17, 27, "FATALITIES")]}),    ("Duas vítimas mortais foram encontradas.", {"entities": [(0, 16, "FATALITIES")]}),    ("Seis pessoas perderam a vida no incidente.", {"entities": [(0, 27, "FATALITIES")]}),    ("A tragédia resultou em três mortes.", {"entities": [(23, 34, "FATALITIES")]}),    ("O número de mortos chegou a cinco.", {"entities": [(13, 25, "FATALITIES")]}),        # INJURED - improved spans to avoid false positives    ("Quinze pessoas ficaram feridas.", {"entities": [(0, 28, "INJURED")]}),    ("Três feridos foram hospitalizados.", {"entities": [(0, 9, "INJURED")]}),    ("O acidente deixou dez pessoas feridas.", {"entities": [(19, 37, "INJURED")]}),    ("Vários moradores sofreram ferimentos leves.", {"entities": [(0, 34, "INJURED")]}),    ("Duas pessoas foram atendidas com ferimentos.", {"entities": [(0, 41, "INJURED")]}),    ("Os bombeiros socorreram cinco feridos.", {"entities": [(25, 32, "INJURED")]}),    ("Dezenas ficaram feridas no acidente.", {"entities": [(0, 23, "INJURED")]}),    ("O desabamento deixou três pessoas feridas.", {"entities": [(21, 42, "INJURED")]}),        # EVACUATED - improved spans and clearer boundaries    ("Cerca de 200 pessoas foram evacuadas.", {"entities": [(0, 35, "EVACUATED")]}),    ("As autoridades evacuaram dez famílias.", {"entities": [(15, 34, "EVACUATED")]}),    ("Trinta moradores foram retirados.", {"entities": [(0, 29, "EVACUATED")]}),    ("A área foi completamente evacuada.", {"entities": [(0, 29, "EVACUATED")]}),    ("Bombeiros evacuaram cinquenta pessoas.", {"entities": [(10, 34, "EVACUATED")]}),    ("As famílias foram retiradas da área de risco.", {"entities": [(0, 29, "EVACUATED")]}),        # DISPLACED - better distinction from EVACUATED    ("Cinquenta famílias ficaram desalojadas.", {"entities": [(0, 36, "DISPLACED")]}),    ("Vinte pessoas estão desabrigadas.", {"entities": [(0, 31, "DISPLACED")]}),    ("O temporal deixou famílias sem casa.", {"entities": [(13, 34, "DISPLACED")]}),    ("Moradores perderam suas residências.", {"entities": [(0, 32, "DISPLACED")]}),    ("Dezenas de pessoas ficaram sem moradia.", {"entities": [(0, 38, "DISPLACED")]}),    ("As enchentes deixaram várias famílias desalojadas.", {"entities": [(13, 45, "DISPLACED")]}),        # MISSING - improved to avoid confusion with INJURED    ("Duas pessoas continuam desaparecidas.", {"entities": [(0, 34, "MISSING")]}),    ("Há três desaparecidos após o temporal.", {"entities": [(3, 20, "MISSING")]}),    ("Uma criança está em paradeiro desconhecido.", {"entities": [(0, 40, "MISSING")]}),    ("Bombeiros procuram por pessoa desaparecida.", {"entities": [(19, 38, "MISSING")]}),    ("Ainda não localizaram dois moradores.", {"entities": [(23, 36, "MISSING")]}),    ("Uma pessoa permanece desaparecida.", {"entities": [(0, 31, "MISSING")]}),        # Negative examples - expanded    ("A chuva causou apenas danos materiais.", {"entities": []}),    ("O rio transbordou mas não houve vítimas.", {"entities": []}),    ("A situação está sob controle.", {"entities": []}),    ("Os bombeiros avaliam os estragos.", {"entities": []}),    ("A água invadiu várias casas.", {"entities": []}),    ("O temporal causou prejuízos.", {"entities": []}),    ("As estradas foram interditadas.", {"entities": []}),    ("Equipes trabalham na recuperação.", {"entities": []}),    ("A previsão é de mais chuva.", {"entities": []}),    ("O rio está subindo rapidamente.", {"entities": []}),    ("Várias áreas estão alagadas.", {"entities": []}),    ("As autoridades monitoram a situação.", {"entities": []}),    ("O alerta foi emitido ontem.", {"entities": []}),    ("A defesa civil atua na região.", {"entities": []}),    ("Foram registrados danos estruturais.", {"entities": []})]def train_ner(output_dir: str = "../google_news_scrapper/models/victims_nlp", n_iter: int = 30):    """Train the NER model with improved dataset."""    # Create output directory if it doesn't exist    os.makedirs(output_dir, exist_ok=True)        nlp = spacy.blank("pt")  # Portuguese model    if "ner" not in nlp.pipe_names:        ner = nlp.add_pipe("ner")    else:        ner = nlp.get_pipe("ner")        # Add labels    ner.add_label("FATALITIES")    ner.add_label("INJURED")    ner.add_label("EVACUATED")    ner.add_label("DISPLACED")    ner.add_label("MISSING")    # Training    other_pipes = [pipe for pipe in nlp.pipe_names if pipe != "ner"]    with nlp.disable_pipes(*other_pipes):        nlp.begin_training()        for itn in range(n_iter):            losses = {}            examples = []            for text, annotations in TRAIN_DATA:
                doc = nlp.make_doc(text)
                example = Example.from_dict(doc, annotations)
                examples.append(example)
            nlp.update(examples, drop=0.3, losses=losses)
            print(f"Iteration {itn+1}, Losses: {losses}")

    nlp.to_disk(output_dir)
    print(f"Model saved to {output_dir}")

if __name__ == "__main__":
    print("Starting training with improved dataset...")
    train_ner()
